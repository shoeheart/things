(see ami.txt for how our AMI got created)

now that AMI is created, create instances using these steps:

step 1: choose latest AMI

step 2: choose t2.micro

step 3:
number of instances 1
purchasing option unchecked
network default
subnet no preference
auto-assign public ip (that's the default)
turn on termination protection
no placement group
no IAM role
shutdown behavior stop
no detailed monitoring
EBS optimized instance (already checked since is required by instance type)
tenancy shared
turn on t2/t3 unlimited bursting since it may at most double cost (unlikely)
(see https://aws.amazon.com/blogs/aws/new-t3-instances-burstable-cost-effective-performance/)
next

step 4:
change storage to 20 GB general purpose ssd (GP2)
keep delete on termination (will warn as long as protection is enabled above)
not encrypted

step 5:
skip tags

step 6:
select existing security group, choose both:
ec2-ssh
lb-to-port-5000

review and launch

click launch
pick existing codebarn_ohio key pair
acknowledge
click launch instances

rename to right instance name in ec2 dashboard (like things)
ssh-add -K ~/.ssh/codebarn_ohio.pem
copy public IP address from EC2 dashboard
ssh ubuntu@<public IP>

#
# set machine hostname
#
sudo vi /etc/hosts
  (just change 127.0.0.1 from localhost to new hostname)
  (don't change any of the ipv6 entries)
sudo vi /etc/hostname
sudo hostname <new-hostname-like-name-of-workspace-repo>

# create a github deploy key:
cd
cd .ssh
rm id_rsa*
ssh-keygen -t rsa -b 4096 -C "engineering@codebarn.com"
cat id_rsa.pub
# take defaults and no passphrase
# add to whichever github repo you'll be cloning from
# name it same as hostname you picked
# allow write access
# (each deploy key can only be used on one repo so use one per machine)

#
# clone repo
#
cd /workspace
git clone git@github.com:shoeheart/<whatever>.git

#
# setup auto maintenance of GIT_COMMIT
#
# (with date)
# git log --date=short --pretty=format:'%cd.%h' -n 1 | sed "s/-//g"
#
add .git/hooks/post-merge with contents:
echo "git log --pretty=format:'%h' -n 1 > GIT_COMMIT" > .git/hooks/post-merge
chmod 755 .git/hooks/post-merge

#
# create GIT_COMMIT since first pull wouldn't do it without hook in place
#
git log --pretty=format:'%h' -n 1 > GIT_COMMIT

#
# if switching to a particular branch do:
#
git checkout -b <branch-name> origin/<branch-name>


#
# set up one time master/secret key
#
hand create config/master.key (rails 5.2)
or config/secrets.yml.key (rails 5.1) with right contents

# hand create .env if needed
# (use single quotes to avoid escape problems in .env)
VAR='...'


# initial / full reset deploy
sudo systemctl stop things.target
cd /workspace/things
git pull
bundle install
# first time rails won't be visible in path so logout and back in
rails webpacker:clobber
yarn install
NODE_ENV=production bundle exec rails assets:precompile
DISABLE_DATABASE_ENVIRONMENT_CHECK=1 RAILS_ENV=production bundle exec rails db:reset
sudo shutdown -r now

#
# set up systemd target files
#
sudo su -
cd /lib/systemd/system
cp /workspace/<repo>/systemd/* .
exit
sudo systemctl enable <yourapp>.target
sudo systemctl list-unit-files | grep <yourapp>

sudo systemctl start <target>.target
sudo systemctl --state=failed
debug from there if still not working

#
# if you edit anything, then do:
#
sudo systemctl daemon-reload

reboot should also start everything

#
# create target group
#
group name things (or whatever instance is)
protocol http
port 5000
target type instance
vpc default
health check protocol http
health check path /ping

#
# add EC2 instance to target group
#

#
# create load balancer
#
application load balancer
name things
scheme internet-facing
ip address type ipv4
keep http listener on 80
add https listener on 443
add all availability zones
next
choose a certificate from ACM
*.codebarn.com
security policy ELBSecurityPolicy-2016-08 (the default)
select existing security group lb-http-https (deselect default group)
next
existing target group
next
next: review
create
once created, adjust listeners to route 80 to 443
delete existing rule
add redirect to https, 443, original host, path, query, 301 permanently moved

once lb and targetgroups all set, enter CNAMEs to external DNS

#
# view sidekiq job journals
#
journalctl -f -u things-interactive.service
journalctl -f -u things-batch.service
journalctl -f -u things-web.service


